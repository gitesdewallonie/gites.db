# -*- coding: utf-8 -*-
from sqlalchemy import MetaData
from z3c.sqlalchemy import Model
from z3c.sqlalchemy.interfaces import IModelProvider
from zope.interface import implements
from gites.db.content import (BlockingHistory,
                              Charge,
                              Commune,
                              Hebergement,
                              HebergementApp,
                              HebergementBlockingHistory,
                              HebergementMaj,
                              HebergementVideo,
                              InfoTouristique,
                              TypeInfoTouristique,
                              InfoPratique,
                              TypeInfoPratique,
                              LinkHebergementEpis,
                              LinkHebergementMetadata,
                              LogItem,
                              MaisonTourisme,
                              MapBlacklist,
                              MapExternalData,
                              MapProvider,
                              Metadata,
                              MetadataType,
                              Proprio,
                              ProprioMaj,
                              Province,
                              ReservationProprio,
                              TableHote,
                              TypeHebergement,
                              TypeTableHoteOfHebergementMaj,
                              Civilite,
                              NotificationOrigin,
                              Notification,
                              Cron)
from gites.db import DeclarativeBase
from affinitic.db import utils


class GitesModel(object):
    """
    A model providers provides information about the tables to be used
    and the mapper classes.
    """
    implements(IModelProvider)

    def getModel(self, metadata=None):
        """
            The model is described as an ordered dictionary.  The entries are
            (tablename, some_dict) where 'some_dict' is a dictionary containing a
            key 'table' referencing a Table() instance and an optional key
            'relationships' referencing a sequence of related table names. An
            optional mapper class can be specified through the 'class' key
            (otherwise a default mapper class will be autogenerated).
        """
        utils.initialize_declarative_mappers(DeclarativeBase, metadata)
        model = Model()
        model.metadata = metadata
        model.add('reservation_proprio',
                  table=ReservationProprio.__table__,
                  mapper_class=ReservationProprio)
        model.add('commune', table=Commune.__table__,
                  mapper_class=Commune)
        model.add('proprio', table=Proprio.__table__,
                  mapper_class=Proprio)
        model.add('proprio_maj', table=ProprioMaj.__table__,
                  mapper_class=ProprioMaj)
        model.add('province', table=Province.__table__,
                  mapper_class=Province)
        model.add('charge', table=Charge.__table__,
                  mapper_class=Charge)
        model.add('hebergement', table=Hebergement.__table__,
                  mapper_class=Hebergement)
        model.add('hebergement_app', table=HebergementApp.__table__,
                  mapper_class=HebergementApp)
        model.add('hebergement_maj', table=HebergementMaj.__table__,
                  mapper_class=HebergementMaj)
        model.add('hebergement_video', table=HebergementVideo.__table__,
                  mapper_class=HebergementVideo)
        model.add('maison_tourisme', table=MaisonTourisme.__table__,
                  mapper_class=MaisonTourisme)
        model.add('type_heb', TypeHebergement.__table__,
                  mapper_class=TypeHebergement)
        model.add('info_touristique', table=InfoTouristique.__table__,
                  mapper_class=InfoTouristique)
        model.add('type_info_touristique', table=TypeInfoTouristique.__table__,
                  mapper_class=TypeInfoTouristique)
        model.add('info_pratique', table=InfoPratique.__table__,
                  mapper_class=InfoPratique)
        model.add('type_info_pratique', table=TypeInfoPratique.__table__,
                  mapper_class=TypeInfoPratique)
        model.add('table_hote', table=TableHote.__table__,
                  mapper_class=TableHote)
        model.add('heb_tab_hote_maj', table=TypeTableHoteOfHebergementMaj.__table__,
                  mapper_class=TypeTableHoteOfHebergementMaj)
        model.add('log_item', table=LogItem.__table__,
                  mapper_class=LogItem)
        model.add('map_provider',
                  table=MapProvider.__table__,
                  mapper_class=MapProvider)
        model.add('map_blacklist',
                  table=MapBlacklist.__table__,
                  mapper_class=MapBlacklist)
        model.add('map_external_data',
                  table=MapExternalData.__table__,
                  mapper_class=MapExternalData)
        model.add('link_hebergement_metadata',
                  table=LinkHebergementMetadata.__table__,
                  mapper_class=LinkHebergementMetadata)
        model.add('metadata_type',
                  table=MetadataType.__table__,
                  mapper_class=MetadataType)
        model.add('metadata',
                  table=Metadata.__table__,
                  mapper_class=Metadata)
        model.add('civilite',
                  table=Civilite.__table__,
                  mapper_class=Civilite)
        model.add('blockinghistory',
                  table=BlockingHistory.__table__,
                  mapper_class=BlockingHistory)
        model.add('hebergementblockinghistory',
                  table=HebergementBlockingHistory.__table__,
                  mapper_class=HebergementBlockingHistory)
        model.add('linkhebergementepis',
                  table=LinkHebergementEpis.__table__,
                  mapper_class=LinkHebergementEpis)

        model.add('pivot_origin',
                  table=NotificationOrigin.__table__,
                  mapper_class=NotificationOrigin)
        model.add('pivot_notification',
                  table=Notification.__table__,
                  mapper_class=Notification)

        model.add('cron',
                  table=Cron.__table__,
                  mapper_class=Cron)

        utils.initialize_defered_mappers(model.metadata)
        return model


def setupRDB(engine):
    metadata = MetaData(engine)
    model = GitesModel()
    model.getModel(metadata)
