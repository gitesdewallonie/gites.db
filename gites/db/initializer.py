# -*- coding: utf-8 -*-
"""
gites.db

Licensed under the GPL license, see LICENCE.txt for more details.
Copyright by Affinitic sprl

$Id: event.py 67630 2006-04-27 00:54:03Z jfroche $
"""
from z3c.sqlalchemy import Model
from z3c.sqlalchemy.interfaces import IModelProvider
from zope.interface import implements
from sqlalchemy.orm import mapper, relation, clear_mappers
from gites.db.tables import (getHebergementTable,
                             getTypeHebergementTable,
                             getMaisonTourisme, getCommune,
                             getProprio, getCivilite,
                             getProvinces, getInfoTouristique,
                             getTableHote,
                             getTypeTableHoteOfHebergement,
                             getLinkHebergementEpisTable,
                             getInfoPratique,
                             getTypeInfoPratique,
                             getTypeInfoTouristique,
                             getCharge)
from gites.db.content import (Civilite, Province, TableHote,
                              Charge, MaisonTourisme,
                              Hebergement, Commune,
                              TypeHebergement, InfoTouristique,
                              TypeTableHoteOfHebergement, LinkHebergementEpis,
                              Proprio)


class GitesModel(object):
    """
    A model providers provides information about the tables to be used
    and the mapper classes.
    """
    implements(IModelProvider)

    def getModel(self, metadata=None):
        """
            The model is described as an ordered dictionary.  The entries are
            (tablename, some_dict) where 'some_dict' is a dictionary containing a
            key 'table' referencing a Table() instance and an optional key
            'relationships' referencing a sequence of related table names. An
            optional mapper class can be specified through the 'class' key
            (otherwise a default mapper class will be autogenerated).
        """
        clear_mappers()

        CiviliteTable = getCivilite(metadata)
        CiviliteTable.create(checkfirst=True)

        MaisonTourismeTable = getMaisonTourisme(metadata)
        MaisonTourismeTable.create(checkfirst=True)

        ProvincesTable = getProvinces(metadata)
        ProvincesTable.create(checkfirst=True)

        CommuneTable = getCommune(metadata)
        CommuneTable.create(checkfirst=True)

        ProprioTable = getProprio(metadata)
        ProprioTable.create(checkfirst=True)

        TypeHebergementTable = getTypeHebergementTable(metadata)
        TypeHebergementTable.create(checkfirst=True)

        ChargeTable = getCharge(metadata)
        ChargeTable.create(checkfirst=True)

        HebergementTable = getHebergementTable(metadata)
        HebergementTable.create(checkfirst=True)

        InfoTouristiqueTable = getInfoTouristique(metadata)
        InfoTouristiqueTable.create(checkfirst=True)

        InfoPratiqueTable = getInfoPratique(metadata)
        InfoPratiqueTable.create(checkfirst=True)

        TypeInfoPratiqueTable = getTypeInfoPratique(metadata)
        TypeInfoPratiqueTable.create(checkfirst=True)

        TypeInfoTouristiqueTable = getTypeInfoTouristique(metadata)
        TypeInfoTouristiqueTable.create(checkfirst=True)

        TableHoteTable = getTableHote(metadata)
        TableHoteTable.create(checkfirst=True)

        TypeTableHoteOfHebergementTable = getTypeTableHoteOfHebergement(metadata)
        TypeTableHoteOfHebergementTable.create(checkfirst=True)

        LinkHebergementEpisTable = getLinkHebergementEpisTable(metadata)

        mapper(LinkHebergementEpis, LinkHebergementEpisTable)

        mapper(InfoTouristique, InfoTouristiqueTable)

        mapper(Province, ProvincesTable,
               properties={'relatedHebergement': relation(Hebergement, lazy=True,
                                                          secondary=CommuneTable,
                                                          primaryjoin=ProvincesTable.c.prov_pk==CommuneTable.c.com_prov_fk,
                                                          secondaryjoin=CommuneTable.c.com_pk==HebergementTable.c.heb_com_fk)})

        mapper(Commune, CommuneTable,
               properties={'relatedHebergement': relation(Hebergement, lazy=True,
                            primaryjoin=CommuneTable.c.com_pk==HebergementTable.c.heb_com_fk),
                           'province': relation(Province, lazy=True,
                                                primaryjoin=ProvincesTable.c.prov_pk==CommuneTable.c.com_prov_fk)})
        mapper(Civilite, CiviliteTable)

        mapper(Proprio, ProprioTable,
               properties={'civilite': relation(Civilite),
                           'commune': relation(Commune)})

        mapper(TableHote, TableHoteTable)

        mapper(TypeTableHoteOfHebergement, TypeTableHoteOfHebergementTable, primary_key=[TypeTableHoteOfHebergementTable.c.hebhot_heb_fk, TypeTableHoteOfHebergementTable.c.hebhot_tabho_fk])

        mapper(Charge, ChargeTable)

        mapper(Hebergement, HebergementTable,
               properties={'type': relation(TypeHebergement, lazy=True),
                           'proprio': relation(Proprio, lazy=True),
                           'charge': relation(Charge, lazy=True),
                           'commune': relation(Commune, lazy=True),
                           'epis': relation(LinkHebergementEpis, lazy=True),
                           'province': relation(Province,
                                                secondary=CommuneTable,
                                                foreign_keys=[CommuneTable.c.com_pk, CommuneTable.c.com_prov_fk],
                                                primaryjoin=HebergementTable.c.heb_com_fk==CommuneTable.c.com_pk,
                                                secondaryjoin=CommuneTable.c.com_prov_fk==ProvincesTable.c.prov_pk,
                                                lazy=True),
                           'maisonTourisme': relation(MaisonTourisme,
                                                      secondary=CommuneTable,
                                                      foreign_keys=[CommuneTable.c.com_pk, CommuneTable.c.com_mais_fk],
                                                      primaryjoin=CommuneTable.c.com_pk==HebergementTable.c.heb_com_fk,
                                                      secondaryjoin=MaisonTourismeTable.c.mais_pk==CommuneTable.c.com_mais_fk,
                                                      lazy=True),
                           'tableHote': relation(TableHote,
                                                 secondary=TypeTableHoteOfHebergementTable,
                                                 foreign_keys=[TypeTableHoteOfHebergementTable.c.hebhot_heb_fk, TypeTableHoteOfHebergementTable.c.hebhot_tabho_fk],
                                                 primaryjoin=HebergementTable.c.heb_pk==TypeTableHoteOfHebergementTable.c.hebhot_heb_fk,
                                                 secondaryjoin=TypeTableHoteOfHebergementTable.c.hebhot_tabho_fk==TableHoteTable.c.tabho_pk,
                                                 lazy=True),
                           })
        mapper(TypeHebergement, TypeHebergementTable)

        mapper(MaisonTourisme, MaisonTourismeTable,
               properties={'commune': relation(Commune,
                                               lazy=True),
                           'infosTouristique': relation(InfoTouristique,
                                                       secondary=CommuneTable,
                                                       primaryjoin=CommuneTable.c.com_mais_fk==MaisonTourismeTable.c.mais_pk,
                                                       secondaryjoin=CommuneTable.c.com_pk==InfoTouristiqueTable.c.infotour_commune_fk,
                                                       lazy=True)})

        model = Model()
        model.add('commune', table=CommuneTable,
                  mapper_class=Commune)
        model.add('province', table=ProvincesTable,
                  mapper_class=Province)
        model.add('charge', table=ChargeTable,
                  mapper_class=Charge)
        model.add('hebergement', table=HebergementTable,
                  mapper_class=Hebergement)
        model.add('maison_tourisme', table=MaisonTourismeTable,
                  mapper_class=MaisonTourisme)
        model.add('type_heb', TypeHebergementTable,
                  mapper_class=TypeHebergement)
        model.add('info_touristique', table=InfoTouristiqueTable,
                  mapper_class=InfoTouristique)
        model.add('table_hote', table=TableHoteTable,
                  mapper_class=TableHote)


        return model
